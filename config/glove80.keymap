/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

&caps_word { continue-list = <UNDERSCORE BACKSPACE DELETE MINUS>; };

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 0>, <&to 4>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        ht_kp: ht_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_KP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
            quick-tap-ms = <250>;
            hold-trigger-on-release;
        };

        ht_mo: ht_mo {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_MO";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
            quick-tap-ms = <150>;
        };

        td_shift_caps_word: td_shift_caps_word {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SHIFT_CAPS_WORD";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&caps_word>;
        };

        ht_kp_lt: ht_kp_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_KP_LT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
            require-prior-idle-ms = <300>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 9 17 18 19 20 21 29 30 31 32 33 41 42 43 44 45 59 60 61 62 63 75 76 77 78 79 16 28 40 58 74 55 56 72 73 56 57 58 73 74 69 52 53 54 71 70>;
        };

        ht_kp_rt: ht_kp_rt {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_KP_RT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <200>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <53 54 0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 64 65 66 67 68 69 70 71 72 57 73 56 55 74>;
        };

        ht_sk_kp: ht_sk_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_SK_KP";
            bindings = <&sk>, <&ht_kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
        };

        ht_layer_mo_to: ht_layer_mo_to {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_LAYER_MO_TO";
            bindings = <&mo>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <300>;
        };

        new_behavior: new_behavior {
            compatible = "zmk,behavior-hold-tap";
            label = "NEW_BEHAVIOR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <200>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 9 17 18 19 20 21 29 30 31 32 33 41 42 43 44 45 59 60 61 62 63 75 76 77 78 79 16 28 40 58 74 55 56 72 73 56 57 58 73 74 69 52 53 54 71 70>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        macro_and: macro_and {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp N &kp D>;
            label = "MACRO_AND";
        };

        macro_for: macro_for {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F &kp O &kp R>;
            label = "MACRO_FOR";
        };

        macro_you: macro_you {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Y &kp O &kp U>;
            label = "MACRO_YOU";
        };

        macro_not: macro_not {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N &kp O &kp T>;
            label = "MACRO_NOT";
        };

        macro_that: macro_that {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &kp H &kp A &kp T>;
            label = "MACRO_THAT";
        };

        macro_this: macro_this {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &kp H &kp I &kp S>;
            label = "MACRO_THIS";
        };

        macro_new_line_below_mac: macro_new_line_below_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp ENTER>;
            label = "MACRO_NEW_LINE_BELOW_MAC";
        };

        macro_new_line_above: macro_new_line_above {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp UP_ARROW &kp END &kp ENTER>;
            label = "MACRO_NEW_LINE_ABOVE";
        };

        macro_chopsuey: macro_chopsuey {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp H &kp N0 &kp P &kp S &kp U &kp N3 &kp Y>;
            label = "MACRO_CHOPSUEY";
        };

        combo_when: combo_when {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp W &kp H &kp E &kp N>;
            label = "COMBO_WHEN";
        };

        macro_then: macro_then {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &kp H &kp E &kp N>;
            label = "MACRO_THEN";
        };

        macro_than: macro_than {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &kp H &kp A &kp N>;
            label = "MACRO_THAN";
        };

        macro_why: macro_why {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp W &kp H &kp Y>;
            label = "MACRO_WHY";
        };

        macro_because: macro_because {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp B &kp E &kp C &kp A &kp U &kp S &kp E>;
            label = "MACRO_BECAUSE";
        };

        macro_said: macro_said {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp A &kp I &kp D>;
            label = "MACRO_SAID";
        };

        macro_would: macro_would {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp W &kp O &kp U &kp L &kp D>;
            label = "MACRO_WOULD";
        };

        macro_sel_current_word: macro_sel_current_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(RIGHT) &kp LA(LS(LEFT_ARROW))>;
            label = "MACRO_SEL_CURRENT_WORD";
        };

        macro_del_current_word: macro_del_current_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(RIGHT_ARROW) &kp LA(BACKSPACE)>;
            label = "MACRO_DEL_CURRENT_WORD";
        };

        macro_paste_replace: macro_paste_replace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(RIGHT) &kp LA(LS(LEFT)) &kp LG(P)>;
            label = "MACRO_PASTE_REPLACE";
        };

        macro_please: macro_please {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp P &kp L &kp E &kp A &kp S &kp E>;
            label = "MACRO_PLEASE";
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_caps_word {
            bindings = <&caps_word>;
            key-positions = <52 57>;
        };

        combo_that {
            bindings = <&macro_that>;
            key-positions = <35 27 40>;
            layers = <0>;
            timeout-ms = <250>;
            require-prior-idle-ms = <350>;
        };

        macro_this {
            bindings = <&macro_this>;
            key-positions = <27 30 40>;
            layers = <0>;
            timeout-ms = <250>;
            require-prior-idle-ms = <350>;
        };

        combo_and {
            bindings = <&macro_and>;
            key-positions = <35 58>;
            require-prior-idle-ms = <300>;
            layers = <0>;
            timeout-ms = <100>;
        };

        combo_you {
            bindings = <&macro_you>;
            key-positions = <28 31>;
            layers = <0>;
            require-prior-idle-ms = <300>;
            timeout-ms = <100>;
        };

        combo_would {
            bindings = <&macro_would>;
            key-positions = <24 37 43>;
            layers = <0>;
            require-prior-idle-ms = <300>;
            timeout-ms = <100>;
        };

        combo_because {
            bindings = <&macro_because>;
            key-positions = <51 49>;
            layers = <0>;
            require-prior-idle-ms = <300>;
            timeout-ms = <100>;
        };

        macro_then {
            bindings = <&macro_then>;
            key-positions = <27 25 58>;
            timeout-ms = <200>;
            require-prior-idle-ms = <350>;
            layers = <0>;
        };

        macro_than {
            bindings = <&macro_than>;
            key-positions = <35 27 58>;
            layers = <0>;
            timeout-ms = <200>;
            require-prior-idle-ms = <350>;
        };

        macro_please {
            bindings = <&macro_please>;
            key-positions = <44 43 36>;
            timeout-ms = <200>;
            require-prior-idle-ms = <350>;
            layers = <0>;
        };

        macro_del_current_word {
            bindings = <&macro_del_current_word>;
            key-positions = <70 49>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1                 &kp F2                    &kp F3                            &kp F4                  &kp F5                                                                                                                                                                       &kp F6                   &kp F7            &kp F8            &kp F9             &kp F10
&kp EQUAL              &kp N1                    &kp N2                            &kp N3                  &kp N4              &kp N5                                                                                                                                           &kp N6  &kp N7                   &kp N8            &kp N9            &kp N0             &kp MINUS
&kp TAB                &kp Q                     &kp W                             &kp E                   &kp R               &kp T                                                                                                                                            &kp Y   &kp U                    &kp I             &kp O             &kp COLON          &kp BSLH
&kp ESC                &ht_kp_lt LEFT_CONTROL A  &ht_kp_lt LALT S                  &ht_kp_lt LGUI D        &ht_kp_lt LSHFT F   &kp G                                                                                                                                            &kp H   &ht_kp_rt RIGHT_SHIFT J  &ht_kp_rt LGUI K  &ht_kp_rt RALT L  &ht_kp_rt RCTRL P  &kp SQT
&ht_kp_lt LSHFT GRAVE  &kp Z                     &kp X                             &kp C                   &kp V               &kp B   &ht_kp_lt LEFT_SHIFT ESC  &ht_layer_mo_to 1 1  &kp LGUI             &kp RCTRL            &ht_layer_mo_to 1 1  &ht_kp_rt RIGHT_SHIFT TAB  &kp N   &kp M                    &kp COMMA         &kp DOT           &kp FSLH           &kp RIGHT_SHIFT
&magic 5 0             &kp HOME                  &ht_kp_lt LEFT_CONTROL PAGE_DOWN  &ht_kp_lt RALT PAGE_UP  &ht_kp_lt LGUI END          &ht_mo 2 BACKSPACE        &ht_mo 1 DELETE      &ht_layer_mo_to 3 3  &ht_layer_mo_to 3 3  &ht_mo 1 ENTER       &ht_mo 2 SPACE                     &kp LEFT                 &kp DOWN          &kp UP_ARROW      &kp RIGHT_ARROW    &to 4
            >;
        };

        nav {
            bindings = <
&kp C_BRIGHTNESS_DEC  &kp LS(C_BRIGHTNESS_INC)  &kp C_PREVIOUS  &kp C_NEXT               &kp C_PLAY_PAUSE                                                                                         &kp RS(C_MUTE)    &kp C_VOLUME_UP        &kp C_VOL_DN               &trans             &trans
&trans                &trans                    &trans          &trans                   &trans                   &trans                                                               &trans     &trans            &trans                 &trans                     &trans             &trans
&trans                &to 0                     &kp LA(RIGHT)   &kp UP_ARROW             &macro_paste_replace     &kp LC(T)                                                            &kp LG(C)  &kp LG(Z)         &macro_new_line_above  &macro_new_line_below_mac  &kp N0             &trans
&to 0                 &kp LA(LEFT)              &kp LEFT_ARROW  &kp UP_ARROW             &kp RIGHT                &kp LC(G)                                                            &kp LEFT   &kp DOWN          &kp UP_ARROW           &kp RIGHT                  &kp LG(P)          &trans
&trans                &kp LG(Z)                 &kp DELETE      &macro_del_current_word  &macro_sel_current_word  &kp LA(LEFT)  &trans  &to 0   &trans  &trans  &to 0          &trans  &kp N6     &kp N7            &kp LS(TAB)            &kp TAB                    &kp LG(F)          &trans
&trans                &none                     &none           &kp F11                  &kp F12                                &trans  &trans  &trans  &trans  &kp LA(ENTER)  &trans             &kp LA(LS(LEFT))  &kp LA(LS(DOWN))       &kp LS(LA(UP_ARROW))       &kp LS(LA(RIGHT))  &trans
            >;
        };

        syms {
            bindings = <
&trans  &trans           &trans           &trans            &trans                                                                                          &trans                &trans                 &trans             &trans            &trans
&trans  &trans           &none            &none             &trans             &trans                                                       &trans          &trans                &trans                 &trans             &trans            &trans
&trans  &kp EXCLAMATION  &kp AT_SIGN      &kp HASH          &kp DOLLAR         &kp PERCENT                                                  &kp CARET       &kp AMPERSAND         &kp ASTERISK           &kp COLON          &kp SEMI          &trans
&trans  &kp LEFT_BRACE   &kp RIGHT_BRACE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp PLUS                                                     &kp MINUS       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp DOUBLE_QUOTES  &kp SINGLE_QUOTE  &trans
&trans  &kp TILDE        &kp GRAVE        &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp EQUAL    &trans  &trans  &trans  &trans  &trans  &trans  &kp UNDERSCORE  &kp BACKSLASH         &kp PIPE               &kp GRAVE          &kp QUESTION      &none
&trans  &none            &none            &kp F11           &kp F12                         &trans  &trans  &trans  &trans  &trans  &trans                  &trans                &trans                 &none              &none             &trans
            >;
        };

        nums {
            bindings = <
&trans  &trans    &trans                &trans                 &trans                                                                    &trans          &trans                &trans                 &trans           &trans
&trans  &trans    &trans                &trans                 &trans    &trans                                                  &trans  &trans          &trans                &trans                 &trans           &trans
&trans  &kp F1    &kp F2                &kp F3                 &kp F4    &kp F5                                                  &kp F6  &kp F7          &kp F8                &kp F9                 &kp F10          &kp F11
&to 0   &kp N1    &kp N2                &kp N3                 &kp N4    &kp N5                                                  &kp N6  &kp N7          &kp N8                &kp N9                 &kp N0           &kp F12
&trans  &kp N1    &kp N2                &kp N3                 &kp N4    &kp N5  &to 0   &trans  &trans  &trans  &trans  &kp N0  &kp N6  &kp N7          &kp N8                &kp N9                 &kp N0           &trans
&trans  &kp LBKT  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp RBKT          &trans  &trans  &to 0   &to 0   &trans  &trans          &kp LEFT_BRACE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE  &trans
            >;
        };

        game {
            bindings = <
&kp F1                 &kp F2    &kp F3                            &kp F4                  &kp F5                                                                                                              &kp F6    &kp F7     &kp F8        &kp F9           &kp F10
&kp EQUAL              &kp N1    &kp N2                            &kp N3                  &kp N4              &kp N5                                                                                  &kp N6  &kp N7    &kp N8     &kp N9        &kp N0           &kp MINUS
&kp TAB                &kp Q     &kp W                             &kp E                   &kp R               &kp T                                                                                   &kp Y   &kp U     &kp I      &kp O         &kp COLON        &kp BSLH
&kp ESC                &kp A     &kp S                             &kp D                   &kp F               &kp G                                                                                   &kp H   &kp J     &kp LGUI   &kp L         &kp P            &kp SQT
&ht_kp_lt LSHFT GRAVE  &kp Z     &kp X                             &kp C                   &kp V               &kp B   &kp LSHFT  &kp LCTRL  &kp LGUI  &kp LGUI  &kp RCTRL  &ht_kp_rt RIGHT_SHIFT TAB  &kp N   &kp M     &kp COMMA  &kp DOT       &kp FSLH         &kp ENTER
&magic 5 0             &kp HOME  &ht_kp_lt LEFT_CONTROL PAGE_DOWN  &ht_kp_lt RALT PAGE_UP  &ht_kp_lt LGUI END          &kp SPACE  &kp BSPC   &kp RALT  &kp RALT  &kp RGUI   &kp SPACE                          &kp LEFT  &kp DOWN   &kp UP_ARROW  &kp RIGHT_ARROW  &to 0
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &macro_chopsuey  &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 0
            >;
        };
    };
};
